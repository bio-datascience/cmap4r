[
["index.html", "About the ‘cmap4r’ R package", " About the ‘cmap4r’ R package cmap4r is an R package which contains methods to easily access and download from the “Simons CMAP”, a database which contains openly available quantitative data about the ocean. For further reading about Simons CMAP, refer to https://cmap.readthedocs.io/. There is a counterpart python package here: https://github.com/mdashkezari/opedia/tree/master/pypi "],
["catalog-of-data.html", "1 Catalog of data", " 1 Catalog of data The catalog for the CMAP data is reproduced here. print(get_catalog()) "],
["data-retrieval.html", "2 Data Retrieval 2.1 Getting started &amp; simpler functions 2.2 Download data 2.3 Summarize data 2.4 Colocalize data 2.5 Issue SQL query", " 2 Data Retrieval 2.1 Getting started &amp; simpler functions Data in the CMAP database exists in tables, and can be accessed by specific table names, and variable names therein. For instance, sea surface temperature is from the table &quot;tblSST_AVHRR_OI_NRT&quot;, and the variable name is &quot;sst&quot;. The full set of table names and variable names can be found here: https://cmap.readthedocs.io/en/latest/catalog/catalog.html The CMAP4R function get_catalog() retrieves the latest version. Examples of simpler functions are here: load_all(&quot;~/repos/cmap4r/cmap4r&quot;) ## Simpler functions #################### cruisename = &quot;KOK1606&quot; head(&#39;tblFalkor_2018&#39;) columns(&#39;tblAMT13_Chisholm&#39;) cruise_by_name(cruisename) cruise_bounds(cruisename) print(get_catalog()) Each table contains many data “rows”, which are indexed by “keys” of the four values: (Time, Latitude, Longitude, Depth) Most functions in this package will involve using these data key values, or user-specified ranges of these keys, for certain operations. The most basic operation, explained next, is to download a dataset from a time and space range of interest. 2.2 Download data When retrieving all data from CMAP in a “rectangle” of space and time, specifies the following: Name of table (table) Names of variables in that table (variable) Upper and lower limits of the variables (dt1, dt2, lon1, lon2, lat1, lat2, depth1, depth2) These are used in the space_time() function, which downloads the data as a data frame. dat = space_time(table = &#39;tblsst_AVHRR_OI_NRT&#39;, variable = &#39;sst&#39;, dt1 = &#39;2016-04-30&#39;, dt2 = &#39;2016-04-30&#39;, lon1 = 69, lon2 = 70, lat1 = -161, lat2 = -160, depth1 = 0, depth2 = 5) 2.3 Summarize data Code is outdated A typical table’s “attributes” include: Name of variables, Type of variables, i.e., quantitative, qualitative, time, Size of the table, Space-time range information, Numerical variable range summary. These are used in the various following functions, which are designed to summarize data tables by extracting these table attributes. This is useful for learning about the tables without downloading them prior to analysis. Here are some key examples: con &lt;- dbConnect(odbc::odbc(), DSN=&quot;CMAP-MSSQL&quot;,UID=&quot;ArmLab&quot;,PWD=&quot;ArmLab2018&quot;) DBI::dbExecute(con, &quot;SET QUOTED_IDENTIFIER ON&quot;) ## Choose a table: table_name &lt;- &quot;tblsst_AVHRR_OI_NRT&quot; table_name &lt;- &quot;tblModis_AOD_REP&quot; exclude_tablenames &lt;- c(&quot;tblModis_AOD_REP&quot;, &quot;tblHOT_Macrozooplankton&quot;, &quot;tblDarwin_3day&quot;) table_name = exclude_tablenames[2] table_name = &quot;tblDarwin_Nutrient_Climatology&quot; # Variable name in the table tbl_fields &lt;- dbListFields(con, table_name) print(tbl_fields) ## Obtain a sample of the data tbl_fields &lt;- tbl_sample(con, table_name, n=5) print(tbl_fields) # See the data type of each column in the table tbl_colClass = tbl_vartype(con, table_name) print(tbl_colClass) # Number of observations nObs = tbl_nobs(con, table_name) print(nObs) # Space/time range of the table (slow if table is big) tbl_spacetime = tbl_spacetime_range(con, table_name) print(tbl_spacetime) # Range of only the numeric variables: tbl_range &lt;- tbl_numvar_range(con,table_name) print(tbl_range) dbDisconnect(con) 2.4 Colocalize data First of all, what does it mean to colocalize? Imagine a ship moving along a trajectory, whose location in space and time is recorded in latitude/longitude/time. Then, we’d like to obtain data like sea surface temperature or salinity, as if we were recording it along the ship’s trajectory. Colocalization simply means retrieving such data manually from the database, by querying from the vicinity (a rectangle) of each lat/lon/time triplet of interest, and summarizing it (e.g. taking the average). The size of the vicinity is define by the user-specified “slack” in longitude, latitude and time. For instance, one could ask for 1 degrees of slack in longitude and latitude, and 6 hours of slack in time. The main function is along_track, which colocalizes data for one or multiple tables and variables at a time. The available cruises can be found by running the function cruises(). The available data tables and variable names are listed in the catalog (get_catalog(), or from https://cmap.readthedocs.io/en/latest/catalog/catalog.html). Here is a short example: ## Colocalize a cruise that are already in CMAP: cruise=&#39;diel&#39; targetTables=c(&#39;tblSeaFlow&#39;, &#39;tblPisces_NRT&#39;) targetVars=c(&#39;synecho_abundance&#39;, &#39;NO3&#39;) depth1=0 depth2=5 temporalTolerance=c(0, 4) latTolerance=c(0, 0.25) lonTolerance=c(0, 0.25) depthTolerance=c(5, 5) la(&quot;~/repos/cmap4r/package/cmap4r&quot;) dat = along_track(cruise[1], targetTables[1], targetVars[1], depth1[1], depth2[1], temporalTolerance[1], latTolerance[1], lonTolerance[1], depthTolerance[1]) 2.5 Issue SQL query (For advanced users) Simons CMAP datasets are hosted in a SQL database and the CMAP4R R package provides the user with a number of pre-developed methods to extract and retrieve subsets of the data. The rest of this documentation is dedicated to explore and explain these methods. In addition to the pre-developed functions described above, you may issue custom SQL query statement and returns the results in form of a data frame. apiKey = &quot;5e05c500-d68d-11e9-9d3b-4f83fcec4710&quot; ## TODO: erase query(&quot;SELECT [time], lat, lon, depth, Fe FROM tblPisces_NRT WHERE [time] BETWEEN &#39;2017-06-03&#39; AND &#39;2017-06-03&#39; AND lat BETWEEN 10 AND 55 AND lon BETWEEN -180 AND 100 AND depth BETWEEN 0 AND 0.5 ORDER BY [time], lat, lon, depth&quot;, apiKey) "],
["visualization.html", "3 Visualization 3.1 Scatterplot of two variables 3.2 Histograms", " 3 Visualization There are two built-in options for making plots – scatter plots to compare two variable of interest, or histograms of individual variables. 3.1 Scatterplot of two variables Code is outdated The plot_xy() function makes a scatterplot of two variables (from two tables), aggregated across a variable called agg_var. Why aggregate though? The two variables from the two tables might exist at different time/space resolutions. Because of this potential discrepancy in data resolution, averaging the two datasets at some resolution according to, say, agg_var=&quot;time&quot;, by day, is a useful step before plotting a relationship between the two. There are currently two methods for plotting – one using the ggplot2 R package, and another using plotly. con &lt;- dbConnect(odbc::odbc(), DSN=&quot;CMAP-MSSQL&quot;,UID=&quot;ArmLab&quot;,PWD=&quot;ArmLab2018&quot;) ## Define variables table_list &lt;- c(&#39;tblSST_AVHRR_OI_NRT&#39;, &#39;tblAltimetry_REP&#39;) var_list &lt;- c(&#39;sst&#39;, &#39;sla&#39;) range_var &lt;- list() range_var$lat &lt;- c(25,30) range_var$lon &lt;- c(-160, -155) range_var$time &lt;- c(&#39;2016-03-29&#39;, &#39;2016-05-29&#39;) agg_var &lt;- &#39;time&#39; ## agg_var &lt;- &#39;lat&#39; ## ----------------------------------- ## Dataset from table I selIndex &lt;- 1 table_name &lt;- table_list[selIndex] # Specify table name I sel_var &lt;- var_list[selIndex] # Variable from table name I tbl_subset_x &lt;- get_aggtable(con, table_name, sel_var, range_var, agg_var) head(tbl_subset_x) ## Dataset from table II selIndex &lt;- 2 table_name &lt;- table_list[selIndex] # Specify table name II sel_var &lt;- var_list[selIndex] # Variable from table name II tbl_subset_y &lt;- get_aggtable(con, table_name, sel_var, range_var, agg_var) head(tbl_subset_y) ## Plot out &lt;- plot_xy(con, table_list, var_list, range_var, agg_var, type = &#39;plotly&#39;) out$plot dbDisconnect(con) 3.2 Histograms Code is outdated To generate a histogram plot of a single variable of interest, simply specify which variable and which time/lat/lon/depth range, and use the function plot_hist() as follows: con &lt;- dbConnect(odbc::odbc(), DSN=&quot;CMAP-MSSQL&quot;,UID=&quot;ArmLab&quot;,PWD=&quot;ArmLab2018&quot;) ## Specify what to query table_name &lt;- c(&#39;tblSST_AVHRR_OI_NRT&#39;) sel_name &lt;- c(&#39;sst&#39;) range_var &lt;- list() range_var$lat &lt;- c(20, 24) range_var$lon &lt;- c(-170, 150) range_var$time &lt;- c(&#39;2016-04-30&#39;, &#39;2016-04-30&#39;) ## Obtain a data table: tbl_subset &lt;- get_table(con, table_name, sel_var, range_var) head(tbl_subset) ## Make plot p &lt;- plot_hist(tbl_subset, &#39;plotly&#39;, sel_var) p dbDisconnect(con) "],
["faq.html", "4 FAQ", " 4 FAQ Q: I get an error that looks like this: nanodbc/nanodbc.cpp:1587: 42000: [FreeTDS][SQL Server]Incorrect syntax near 'tblSST_AVHRR_OI_NRT'. A: This likely means the version of TDS (the connection protocol to the database) is not of the correct version. https://www.gitmemory.com/issue/r-dbi/odbc/209/492571028 One way you can check this is by running tsql -C and seeing whether the TDS version is lower than 7.0. If it is lower than 7.0, then you can manually set it using the environmental variable TDSVER. We recommend adding the line TDSVER=8.0 in the file /etc/environment, to permanently set the environmental variable system-wide. Some useful discussions: 1. https://github.com/r-dbi/odbc/issues/209 2. https://stackoverflow.com/questions/13066716/freetds-not-using-its-config?rq=1 3. Examples 3.6-3.8 in https://www.freetds.org/userguide/confirminstall.htm Basically, this shows at that the right TDS version needs to be used, otherwise the server will complain, with a message such as “There was a problem connecting to the server.” You might be able to set the environment variable TDSVER in order to bypass this. For instance, in your .bashrc or your 4. Even more useful is this: https://www.freetds.org/userguide/envvar.htm It tells you exactly what TDSVER does and how FreeTDS uses it. 5. You can also set the versin of TDS in your settings file odbc.ini, by adding the line “[CMAP-MSSQL] TDS_Version = 8.0”. However, this won’t take effect unless you are using the option DSN=CMAP-MSSQL in DBI::dbConnect().&quot; Q: My ODBC and FreeTDS setup doesn’t work. (Obsolete, once connect_cmap() is fully tested.) A: If you set up the DSN files (the odbc.ini file and odbcinst.ini file, both located in /etc/odbc.ini or /opt/local/etc/odbc.ini) as directed, it should initiate a connection correctly. One possibility is that there are local DSN files in your home directory (~/.odbc.inst and ~/.odbcinst.ini). Your database connection will check for these files first. If these exist, either delete them or modify these as instructed, and use these as your primary DSN files. A bit more about ODBC and ODBCINST: 1. Basically, we need to modify the ODBCINST.INI and ODBC.INI files to contain information about the CMAP database, in order to connect to it. 2. The system file odbcinst.ini contains information about ODBC drivers available to all users, and 3. The odbc.ini file contains information about DSN’s available to all users. 4. In short, odbcinst.ini defines driver options, while odbc.ini defines connection options. ODBCINST.INI should contain a pointer: [FreeTDS] Description=FreeTDS Driver for MSSQL (unix users) Driver=/usr/lib/x86_64-linux-gnu/odbc/libtdsodbc.so Setup=/usr/lib/x86_64-linux-gnu/odbc/libtdsodbc.so UsageCount=1 Your ODBCINST.INI should contain the driver to use i.e. Driver = FreeTDS, and optionally the credentials to connecting to the server (the server address, the UID and PWD, and Port). You can also specify these at run time, in your R script. "]
]
