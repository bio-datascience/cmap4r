[
["index.html", "About the ‘cmap4r’ R package", " About the ‘cmap4r’ R package cmap4r is an R package which contains methods to easily access and download from the “Simons CMAP”, a database which contains openly available quantitative data about the ocean. For further reading about Simons CMAP, refer to https://cmap.readthedocs.io/. There is a counterpart python package here: https://github.com/mdashkezari/opedia/tree/master/pypi "],
["installation.html", "1 Installation", " 1 Installation CMAP hosts data on a Microsoft SQL Server. An R user will need the following package to connect to the database: a) “DBI”, for database interface; b) “odbc” for connecting to the database using DBI interface. Mac OS First install the unixODBC library and database drivers. We suggest using SQL Server ODBC drivers (Free TDS). Using Homebrew, run the following commands to install the suggested module. brew install unixodbc brew install freetds Linux OS First, install Anaconda distribution, and then run the following commands to install suggested module. conda install -c anaconda unixodbc conda install -c anaconda freetds Please follow the link to see other drivers available for installation. Windows OS Not written yet. "],
["catalog-of-data.html", "2 Catalog of data", " 2 Catalog of data The catalog for the CMAP data is reproduced here. library(DBI,odbc) con &lt;- dbConnect(odbc::odbc(), DSN=&quot;CMAP-MSSQL&quot;,UID=&quot;ArmLab&quot;,PWD=&quot;ArmLab2018&quot;) fileName &lt;- file.path(getwd(),&quot;catalogquery.txt&quot;) singleString &lt;- readChar(fileName, file.info(fileName)$size) catalog_query &lt;- gsub(&quot;\\n&quot;,&quot;&quot;,singleString) df &lt;- dbGetQuery(con,catalog_query) catVar &lt;- c(&#39;Dataset Name&#39;, &#39;Table Name&#39; ,&#39;Sensor&#39;, &#39;Make&#39;,&#39;Spatial Resolution&#39;, &#39;Temporal Resolution&#39;,&#39;Start Date&#39;,&#39;End Date&#39;) df &lt;- df[,catVar] tblindex &lt;- which(!duplicated(df$`Dataset Name`)) tbl.catelog &lt;- df[tblindex,1:8] rownames(tbl.catelog) &lt;- NULL library(knitr) kable(tbl.catelog) dbDisconnect(con) "],
["functions.html", "3 Functions 3.1 Getting started 3.2 Download data 3.3 Summarize data 3.4 Visualization 3.5 Colocalize data 3.6 Other useful functions", " 3 Functions 3.1 Getting started Data in the CMAP database exists in tables, and can be accessed by specific table names, and variable names therein. For instance, sea surface temperature is from the table &quot;tblSST_AVHRR_OI_NRT&quot;, and the variable name is &quot;sst&quot;. The full set of table names and variable names can be found here: https://cmap.readthedocs.io/en/latest/catalog/catalog.html Each table contains many data “rows”, which are indexed by “keys” of the four values: (Time, Latitude, Longitude, Depth) Most functions in this package will involve using these data key values, or user-specified ranges of these keys, for certain operations. The most basic operation, explained next, is to download a dataset from a time and space range of interest. 3.2 Download data When retrieving the data from CMAP, the user specifies the following: Name of table (table.name) Names of variables in that table (sel_var) “Range” variable (list containing ranges of latitude, longitude, depth, and time) These are used in the getTableData() function, which downloads the data as a data frame. con &lt;- dbConnect(odbc::odbc(), DSN=&quot;CMAP-MSSQL&quot;,UID=&quot;ArmLab&quot;,PWD=&quot;ArmLab2018&quot;) ## Input: Table name; variable name, space time range information table_name = &#39;tblsst_AVHRR_OI_NRT&#39; sel_var = &#39;sst&#39; range_var &lt;- list(lat = c(10,70), lon = c(-180, -80), time &lt;- c(&#39;2016-04-30&#39;, &#39;2016-04-30&#39;)) ## Subset selection: tbl_subset &lt;- get_table(con, table_name, sel_var, range_var) head(tbl_subset) dbDisconnect(con) 3.3 Summarize data A typical table’s “attributes” include: Name of variables, Type of variables, i.e., quantitative, qualitative, time, Size of the table, Space-time range information, Numerical variable range summary. These are used in the various following functions, which are designed to summarize data tables by extracting these table attributes. This is useful for learning about the tables without downloading them prior to analysis. Here are some key examples: con &lt;- dbConnect(odbc::odbc(), DSN=&quot;CMAP-MSSQL&quot;,UID=&quot;ArmLab&quot;,PWD=&quot;ArmLab2018&quot;) DBI::dbExecute(con, &quot;SET QUOTED_IDENTIFIER ON&quot;) ## Choose a table: table_name &lt;- &quot;tblsst_AVHRR_OI_NRT&quot; # Variable name in the table tbl_fields &lt;- dbListFields(con, table_name) print(tbl_fields) ## Obtain a sample of the data tbl_fields &lt;- tbl_sample(con, table_name, n=5) print(tbl_fields) # See the data type of each column in the table tbl_colClass = tbl_vartype(con, table_name) print(tbl_colClass) # Number of observations la(&quot;~/repos/cmap4r/package/cmap4r&quot;) nObs = tbl_nobs(con, table_name) print(nObs) # Space/time range of the table (slow if table is big) tbl_spacetime = tbl_spacetime_range(con, table_name) print(tbl_spacetime) # Range of only the numeric variables: tbl_range &lt;- tbl_numvar_range(con,table_name) print(tbl_range) dbDisconnect(con) 3.4 Visualization There are two built-in options for making plots – scatter plots to compare two variable of interest, or histograms of individual variables. 3.4.1 Scatterplot of two variables The plot_xy() function makes a scatterplot of two variables (from two tables), aggregated across a variable called agg_var. Why aggregate though? The two variables from the two tables might exist at different time/space resolutions. Because of this potential discrepancy in data resolution, averaging the two datasets at some resolution according to, say, agg_var=&quot;time&quot;, by day, is a useful step before plotting a relationship between the two. There are currently two methods for plotting – one using the ggplot2 R package, and another using plotly. con &lt;- dbConnect(odbc::odbc(), DSN=&quot;CMAP-MSSQL&quot;,UID=&quot;ArmLab&quot;,PWD=&quot;ArmLab2018&quot;) ## Define variables table_list &lt;- c(&#39;tblSST_AVHRR_OI_NRT&#39;, &#39;tblAltimetry_REP&#39;) var_list &lt;- c(&#39;sst&#39;, &#39;sla&#39;) range_var &lt;- list() range_var$lat &lt;- c(25,30) range_var$lon &lt;- c(-160, -155) range_var$time &lt;- c(&#39;2016-03-29&#39;, &#39;2016-05-29&#39;) agg_var &lt;- &#39;time&#39; ## agg_var &lt;- &#39;lat&#39; ## ----------------------------------- ## Dataset from table I selIndex &lt;- 1 table_name &lt;- table_list[selIndex] # Specify table name I sel_var &lt;- var_list[selIndex] # Variable from table name I tbl_subset_x &lt;- get_aggtable(con, table_name, sel_var, range_var, agg_var) head(tbl_subset_x) ## Dataset from table II selIndex &lt;- 2 table_name &lt;- table_list[selIndex] # Specify table name II sel_var &lt;- var_list[selIndex] # Variable from table name II tbl_subset_y &lt;- get_aggtable(con, table_name, sel_var, range_var, agg_var) head(tbl_subset_y) ## Plot out &lt;- plot_xy(con, table_list, var_list, range_var, agg_var, type = &#39;plotly&#39;) out$plot dbDisconnect(con) 3.4.2 Histograms To generate a histogram plot of a single variable of interest, simply specify which variable and which time/lat/lon/depth range, and use the function plot_hist() as follows: con &lt;- dbConnect(odbc::odbc(), DSN=&quot;CMAP-MSSQL&quot;,UID=&quot;ArmLab&quot;,PWD=&quot;ArmLab2018&quot;) ## Specify what to query table_name &lt;- c(&#39;tblSST_AVHRR_OI_NRT&#39;) sel_name &lt;- c(&#39;sst&#39;) range_var &lt;- list() range_var$lat &lt;- c(20, 24) range_var$lon &lt;- c(-170, 150) range_var$time &lt;- c(&#39;2016-04-30&#39;, &#39;2016-04-30&#39;) ## Obtain a data table: tbl_subset &lt;- getTableData(con, table_name, sel_var, range_var) head(tbl_subset) ## Make plot p &lt;- plot_hist(tbl_subset, &#39;plotly&#39;, sel_var) p dbDisconnect(con) 3.5 Colocalize data First of all, what does it mean to colocalize? Imagine a ship moving along a trajectory, whose location in space and time is recorded in latitude/longitude/time. Then, we’d like to obtain data like sea surface temperature or salinity, as if we were recording it along the ship’s trajectory. Colocalization simply means retrieving such data manually from the database, by querying from the vicinity of each lat/lon/time triplet and summarizing it (e.g. taking the average). The size of the vicinity is define by the user-specified slack in longitude, latitude and time. For instance, one could ask for 1 degrees of slack in longitude and latitude, and 6 hours of slack in time. Long story short, the basic idea is: query “rectangle” region’s subtable from the databse for every lat/lon/time triplet of interest, for each variable. The main function to do this is matchSource_onetable, which colocalizes data for one table at a time (the table_name variable from the catalog), and one or more variables in that table (the sel_var variable, again from the catalog). The latitude/longitude/time triplets are to be in a CSV file whose path you’ll supply in the variable source. Here is a short example: ## Setup con = DBI::dbConnect(odbc::odbc(), DSN=&quot;CMAP-MSSQL&quot;,UID=&quot;ArmLab&quot;,PWD=&quot;ArmLab2018&quot;) latMargin = 0_3 lonMargin = 0_3 timeMargin = 1 source = &#39;~/Desktop/MGL1704-veryshort.csv&#39; table.name = &quot;tblSST_AVHRR_OI_NRT&quot; sel_var = &quot;sst&quot; res = matchSource_onetable(con, source, table_name, sel_var, latMargin, lonMargin, timeMargin) print(head(res)) 3.6 Other useful functions Suggest some! "],
["faq.html", "4 FAQ", " 4 FAQ Q: How does this differ from the Python package? A: This is better. Use this. Q: My ODBC and FreeTDS setup doesn’t work. A: If you set up the DSN files (the odbc.ini file and odbcinst.ini file, both located in /etc/odbc.ini or /opt/local/etc/odbc.ini) as directed, it should initiate a connection correctly. One possibility is that there are local DSN files in your home directory (~/.odbc.inst and ~/.odbcinst.ini). Your database connection will check for these files first. If these exist, either delete them or modify these as instructed, and use these as your primary DSN files. A bit more about ODBC and ODBCINST: 1. Basically, we need to modify the ODBCINST.INI and ODBC.INI files to contain information about the CMAP database, in order to connect to it. 2. The system file odbcinst.ini contains information about ODBC drivers available to all users, and 3. The odbc.ini file contains information about DSN’s available to all users. 4. In short, odbcinst.ini defines driver options, while odbc.ini defines connection options. ODBCINST.INI should contain a pointer: [FreeTDS] Description=FreeTDS Driver for MSSQL (unix users) Driver=/usr/lib/x86_64-linux-gnu/odbc/libtdsodbc.so Setup=/usr/lib/x86_64-linux-gnu/odbc/libtdsodbc.so UsageCount=1 Your ODBCINST.INI should contain the driver to use i.e. ~Driver = FreeTDS~, and optionally the credentials to connecting to the server (the server address, the UID and PWD, and Port). You can also specify these at run time, in your R script. "]
]
