[
["index.html", "About the ‘cmap4r’ R package", " About the ‘cmap4r’ R package cmap4r is an R package which contains methods to easily access and download from the “Simons CMAP”, a database which contains openly available quantitative data about the ocean. For further reading about Simons CMAP, refer to https://cmap.readthedocs.io/. There is a counterpart python package here: https://github.com/mdashkezari/opedia/tree/master/pypi "],
["catalog-of-data.html", "1 Catalog of data", " 1 Catalog of data You can obtain the latest version of the data catalog for the CMAP data (https://cmap.readthedocs.io/en/latest/catalog/catalog.html) to R using get_catalog(), partially reproduced here. get_catalog() %&gt;% select(Variable, Table_Name, Unit, Sensor, Unit) %&gt;% head(20) %&gt;% kable() Variable Table_Name Unit Sensor vgosa tblAltimetry_REP m/s Satellite vgos tblAltimetry_REP m/s Satellite sla tblAltimetry_REP m Satellite adt tblAltimetry_REP m Satellite ugosa tblAltimetry_REP m/s Satellite ugos tblAltimetry_REP m/s Satellite wind_speed_rms tblWind_NRT m/s Satellite eastward_wind_rms tblWind_NRT m/s Satellite wind_stress tblWind_NRT Pa Satellite eastward_wind tblWind_NRT m/s Satellite surface_downward_eastward_stress tblWind_NRT Pa Satellite wind_speed tblWind_NRT m/s Satellite surface_downward_northward_stress tblWind_NRT Pa Satellite northward_wind tblWind_NRT m/s Satellite northward_wind_rms tblWind_NRT m/s Satellite sst tblSST_AVHRR_OI_NRT C Satellite ftle_bw_sla tblLCS_REP 1/day Satellite disp_bw_sla tblLCS_REP deg Satellite ftle_fw_sla tblLCS_REP 1/day Satellite disp_fw_sla tblLCS_REP deg Satellite "],
["data-retrieval.html", "2 Data Retrieval 2.1 Getting started &amp; simpler functions 2.2 Cruises 2.3 Download data 2.4 Summarize data 2.5 Colocalize data 2.6 Issue SQL query", " 2 Data Retrieval 2.1 Getting started &amp; simpler functions Data in the CMAP database exists in tables, and can be accessed by specific table names, and variable names therein. For instance, sea surface temperature is from the table &quot;tblSST_AVHRR_OI_NRT&quot;, and the variable name is &quot;sst&quot;. Some simpler functions for accessing data are useful for obtaining summaries of the data prior to downloading the data itself. Name of variables (get_columns()) Type of variables, i.e., quantitative, qualitative, time, (get_var_catalog()) Size of the table (??), Space-time range information (get_var_coverage), Numerical variable range summary (get_var_stat()). These are used in the various following functions, which are designed to summarize data tables by extracting these table attributes. This is useful for learning about the tables without downloading them prior to analysis. Here are some key examples: get_head(&quot;tblArgoMerge_REP&quot;) %&gt;% kable() get_var_coverage(&quot;tblAltimetry_REP&quot;, &quot;sla&quot;) get_var_resolution(&quot;tblAltimetry_REP&quot;, &quot;sla&quot;) get_var_unit(&quot;tblAltimetry_REP&quot;, &quot;sla&quot;) ## get_columns(&#39;tblAMT13_Chisholm&#39;) %&gt;% kable() 2.2 Cruises Out of the many data tables in CMAP, some are data collected and processed from cruises. Here are some examples of summarizing this data. cruisename = &quot;KOK1606&quot; get_cruise_by_name(cruisename) %&gt;% kable() get_cruise_bounds(cruisename) %&gt;% kable() get_head(&#39;tblFalkor_2018&#39;) %&gt;% kable() ## get_columns(&#39;tblAMT13_Chisholm&#39;) %&gt;% kable() Each table contains many data “rows”, which are indexed by “keys” of the four values: (Time, Latitude, Longitude, Depth) Most functions in this package will involve using these data key values, or user-specified ranges of these keys, for certain operations. The most basic operation, explained next, is to download a dataset from a time and space range of interest. 2.3 Download data When retrieving all data from CMAP in a “rectangle” of space and time, specifies the following: Name of table (table) Names of variables in that table (variable) Upper and lower limits of the variables (dt1, dt2, lon1, lon2, lat1, lat2, depth1, depth2) These are used in the space_time() function, which downloads the data as a data frame. dat = get_spacetime(tableName = &#39;tblsst_AVHRR_OI_NRT&#39;, varName = &#39;sst&#39;, dt1 = &#39;2016-04-30&#39;, dt2 = &#39;2016-04-30&#39;, lon1 = 69, lon2 = 70, lat1 = -161, lat2 = -160, depth1 = 0, depth2 = 5) %&gt;% kable() head(dat) ## [1] &quot;||&quot; &quot;||&quot; &quot;||&quot; &quot;||&quot; 2.4 Summarize data Code is outdated A typical table’s attributes include: Name of variables, Type of variables, i.e., quantitative, qualitative, time, Size of the table, Space-time range information, Numerical variable range summary. These are used in the various following functions, which are designed to summarize data tables by extracting these table attributes. This is useful for learning about the tables without downloading them prior to analysis. Here are some key examples: 2.5 Colocalize data First of all, what does it mean to colocalize? Imagine a ship moving along a trajectory, whose location in space and time is recorded in latitude/longitude/time. Then, we’d like to obtain data like sea surface temperature or salinity, as if we were recording it along the ship’s trajectory. Colocalization simply means retrieving such data manually from the database, by querying from the vicinity (a rectangle) of each lat/lon/time triplet of interest, and summarizing it (e.g. taking the average). The size of the vicinity is define by the user-specified “slack” in longitude, latitude and time. For instance, one could ask for 1 degrees of slack in longitude and latitude, and 6 hours of slack in time. The main function is along_track, which colocalizes data for one or multiple tables and variables at a time. The available cruises can be found by running the function cruises(). The available data tables and variable names are listed in the catalog (get_catalog(), or from https://cmap.readthedocs.io/en/latest/catalog/catalog.html). Here is a short example: cruise=&#39;diel&#39; targetTables=c(&#39;tblSeaFlow&#39;, &#39;tblPisces_NRT&#39;) targetVars=c(&#39;synecho_abundance&#39;, &#39;NO3&#39;) depth1=0 depth2=5 temporalTolerance=c(0, 4) latTolerance=c(0, 0.25) lonTolerance=c(0, 0.25) depthTolerance=c(5, 5) dat = along_track(cruise[1], targetTables[1], targetVars[1], depth1[1], depth2[1], temporalTolerance[1], latTolerance[1], lonTolerance[1], depthTolerance[1]) ## | | | 0% | |=================================================================| 100% head(dat) %&gt;% kable() time lat lon synecho_abundance synecho_abundance_std 2015-07-25 00:19:45 21.3146 -158.1914 NA NA 2015-07-25 00:22:45 21.3236 -158.1977 NA NA 2015-07-25 00:25:45 21.3327 -158.2040 11.231785 NA 2015-07-25 00:28:46 21.3397 -158.2087 8.571613 NA 2015-07-25 00:31:46 21.3485 -158.2144 7.894531 NA 2015-07-25 00:34:46 21.3573 -158.2201 8.283477 NA 2.6 Issue SQL query (For advanced users) Simons CMAP datasets are hosted in a SQL database and the CMAP4R R package provides the user with a number of pre-developed methods to extract and retrieve subsets of the data. The rest of this documentation is dedicated to explore and explain these methods. In addition to the pre-developed functions described above, you may issue custom SQL query statement and returns the results in form of a data frame. exec_manualquery(&quot;SELECT [time], lat, lon, depth, Fe FROM tblPisces_NRTx WHERE [time] BETWEEN &#39;2017-06-03&#39; AND &#39;2017-06-03&#39; AND lat BETWEEN 10 AND 55 AND lon BETWEEN -180 AND 100 AND depth BETWEEN 0 AND 0.5 ORDER BY [time], lat, lon, depth&quot;) %&gt;% kable() "],
["visualization.html", "3 Visualization 3.1 Regional map 3.2 Time series plot 3.3 Depth profile plot 3.4 XY plot 3.5 Histograms", " 3 Visualization 3.1 Regional map Image/heatmap plot of a table variable from the Simons CMAP database in a given range of latitude and longitude at a fixed time and depth. Specify following parameters to retrieve the required data using get_spacetime. Table Name (tableName) Variables to be extracted (varName) Spatio-temporal range variable includes (latitude, longitude, depth, time) plot_regmap function download the data, and output a regional map plot object: plot_ly/ggplot2 with “x axis” as “longitude” and “y axis” as “lattitude”. User can modify the plot object to produce a properly annotated visualization. tableName &lt;- &quot;tblsst_AVHRR_OI_NRT&quot; varName &lt;- &quot;sst&quot; # Range variable [lat,lon,time,depth] lat1 = 10; lat2 = 70 lon1 = -180; lon2 = -80 dt1 = &quot;2016-04-30&quot;; dt2 = &quot;2016-04-30&quot; depth1 &lt;- 0; depth2 = 0 p &lt;- plot_regmap(tableName, varName, lat1, lat2, lon1, lon2, dt1, dt2, depth1, depth2, type = &quot;plotly&quot;) p 3.2 Time series plot Create a timeseries plot of a table variable from the Simons CMAP database using the specified space-time constraints (dt1, dt2, lat1, lat2, lon1, lon2, depth1, depth2). Internally, the plot function calls get_timeseries to download data aggregated by time. Specify the following parameters to retrieve the required data from the Simons CMAP. Table Name (tableName) Variables to be extracted (varName) Spatio-temporal range variable includes (latitude, longitude, depth, time) Call plot_ts function to obtain plot_ly/ggplot2 object. User can modify the plot object to produce a properly annotated visualization. # Input variable: tableList &lt;- c(&quot;tblSST_AVHRR_OI_NRT&quot;, &quot;tblAltimetry_REP&quot;, &quot;tblPisces_NRT&quot;) varList &lt;- c(&quot;sst&quot;, &quot;sla&quot;, &quot;NO3&quot;) # selected &quot;sst&quot; from the table &quot;tblSST_AVHRR_OI_NRT&quot; selIndex &lt;- 1 tableName &lt;- tableList[selIndex] varName &lt;- varList[selIndex] # Range variable [lat,lon,time,depth] lat1 = 25; lat2 = 30 lon1 = -160; lon2 = -155 dt1 = &quot;2016-03-29&quot;; dt2 = &quot;2016-05-29&quot; # Plot -- Time series: p &lt;- plot_ts(tableName, varName, lat1, lat2, lon1, lon2, dt1, dt2) ## [1] &quot;Depth range is missing. Using default date range.&quot; p 3.3 Depth profile plot Create a depth profile plot of a table variable from the Simons CMAP database using the specified space-time constraints (dt1, dt2, lat1, lat2, lon1, lon2, depth1, depth2). Internally, the plot function calls get_depthprofile to download the data aggregated by depth. Specify the following parameters to retrieve the required data from the Simons CMAP. Table Name (tableName) Variables to be extracted (varName) Spatio-temporal range variable includes (latitude, longitude, depth, time) Depth will be used as an aggregate variable Call plot_depth function to obtain plot_ly/ggplot2 object. User can modify the plot object to produce a properly annotated visualization. # Inpit variable: tableList &lt;- c(&#39;tblArgoMerge_REP&#39;, &#39;tblPisces_NRT&#39;, &#39;tblDarwin_Ecosystem&#39;) varList &lt;- c(&#39;argo_merge_chl_adj&#39;, &#39;CHL&#39;, &#39;CHL&#39;) # # selected argo_merge_chl_adj from tblArgoMerge_REP selIndex &lt;- 1 tableName &lt;- tableList[selIndex] varName &lt;- varList[selIndex] # # Range variable [lat,lon,time,depth] lat1 = 20; lat2 = 24 lon1 = -170; lon2 = -150 dt1 = &quot;2014-04-25&quot;; dt2 = &quot;2014-04-30&quot; depth1 &lt;- 0; depth2 = 1500 # Plot -- Depth profiles: p &lt;- plot_depth(tableName, varName, lat1, lat2, lon1, lon2, dt1, dt2,depth1, depth2, &quot;plotly&quot;) p 3.4 XY plot Create a scatter plot of two table variables from the Simons CMAP database using the specified space-time constraints (dt1, dt2, lat1, lat2, lon1, lon2, depth1, depth2). Internally, the plot function calls get_timeseries/get_depthprofile/get_spacetime to download the data. Why aggregate though? The two variables from the two tables might exist at different time/space resolutions. Because of this potential discrepancy in data resolution, averaging the two datasets at some resolution according to, say, agg_var=&quot;time&quot;, by day, is a useful step before plotting a relationship between the two. Specify the following parameters to retrieve the required data from the Simons CMAP. Table list (list of tableName) Variable list to be extracted (list of variable name) Spatio-temporal range variable includes (latitude, longitude, depth, time) Specify aggregate variable (time/depth/latitude/longitude) Call plot_xy function to obtain plot_ly/ggplot2 object. User can modify the plot object to produce a properly annotated visualization. # Inpit variable: tableList &lt;- c(&quot;tblSST_AVHRR_OI_NRT&quot;, &quot;tblAltimetry_REP&quot;) varList &lt;- c(&quot;sst&quot;, &quot;sla&quot;) # Range variable [lat,lon,time,depth] lat1 = 25; lat2 = 30 lon1 = -160; lon2 = -155 dt1 = &quot;2016-03-29&quot;; dt2 = &quot;2016-05-29&quot; depth1 &lt;- NULL; depth2 = NULL # Aggregate variable agg_var &lt;- &quot;time&quot; # xy plot p &lt;- plot_xy(tableList, varList, lat1, lat2, lon1, lon2, dt1, dt2, depth1, depth2, agg_var) ## [1] &quot;Depth range is missing. Using default date range.&quot; ## [1] &quot;Depth range is missing. Using default date range.&quot; p 3.5 Histograms Create a histogram plot of a table variable from the Simons CMAP database using the specified space-time constraints (dt1, dt2, lat1, lat2, lon1, lon2, depth1, depth2). Internally, the plot function calls get_spacetime to download the data. Specify the following parameters to retrieve the required data from the Simons CMAP. Table Name (tableName) Variables to be extracted (varName) Spatio-temporal range variable includes (latitude, longitude, depth, time) Call plot_hist function to obtain plot_ly/ggplot2 object. User can modify the plot object to produce a properly annotated visualization. # Inpit variable: tableList &lt;- c(&quot;tblSST_AVHRR_OI_NRT&quot;, &quot;tblArgoMerge_REP&quot;, &quot;tblArgoMerge_REP&quot;) varList &lt;- c(&quot;sst&quot;, &quot;argo_merge_temperature_adj&quot;, &quot;argo_merge_salinity_adj&quot;) # variable &quot;sst&quot; selected from &quot;tblSST_AVHRR_OI_NRT&quot; selIndex &lt;- 1 tableName &lt;- tableList[selIndex] varName &lt;- varList[selIndex] # Range variable [lat,lon,time,depth] lat1 = 20; lat2 = 24 lon1 = -170; lon2 = -150 dt1 = &quot;2016-04-30&quot;; dt2 = &quot;2016-04-30&quot; depth1 &lt;- NULL; depth2 = NULL p &lt;- plot_hist(tableName, varName, lat1, lat2, lon1, lon2, dt1, dt2, depth1, depth2, &quot;plotly&quot;) ## [1] &quot;Depth range is missing. Using default date range.&quot; p "],
["faq.html", "4 FAQ", " 4 FAQ Q: I get an error that looks like this: nanodbc/nanodbc.cpp:1587: 42000: [FreeTDS][SQL Server]Incorrect syntax near 'tblSST_AVHRR_OI_NRT'. A: This likely means the version of TDS (the connection protocol to the database) is not of the correct version. https://www.gitmemory.com/issue/r-dbi/odbc/209/492571028 One way you can check this is by running tsql -C and seeing whether the TDS version is lower than 7.0. If it is lower than 7.0, then you can manually set it using the environmental variable TDSVER. We recommend adding the line TDSVER=8.0 in the file /etc/environment, to permanently set the environmental variable system-wide. Some useful discussions: 1. https://github.com/r-dbi/odbc/issues/209 2. https://stackoverflow.com/questions/13066716/freetds-not-using-its-config?rq=1 3. Examples 3.6-3.8 in https://www.freetds.org/userguide/confirminstall.htm Basically, this shows at that the right TDS version needs to be used, otherwise the server will complain, with a message such as “There was a problem connecting to the server.” You might be able to set the environment variable TDSVER in order to bypass this. For instance, in your .bashrc or your 4. Even more useful is this: https://www.freetds.org/userguide/envvar.htm It tells you exactly what TDSVER does and how FreeTDS uses it. 5. You can also set the versin of TDS in your settings file odbc.ini, by adding the line “[CMAP-MSSQL] TDS_Version = 8.0”. However, this won’t take effect unless you are using the option DSN=CMAP-MSSQL in DBI::dbConnect().&quot; Q: My ODBC and FreeTDS setup doesn’t work. (Obsolete, once connect_cmap() is fully tested.) A: If you set up the DSN files (the odbc.ini file and odbcinst.ini file, both located in /etc/odbc.ini or /opt/local/etc/odbc.ini) as directed, it should initiate a connection correctly. One possibility is that there are local DSN files in your home directory (~/.odbc.inst and ~/.odbcinst.ini). Your database connection will check for these files first. If these exist, either delete them or modify these as instructed, and use these as your primary DSN files. A bit more about ODBC and ODBCINST: 1. Basically, we need to modify the ODBCINST.INI and ODBC.INI files to contain information about the CMAP database, in order to connect to it. 2. The system file odbcinst.ini contains information about ODBC drivers available to all users, and 3. The odbc.ini file contains information about DSN’s available to all users. 4. In short, odbcinst.ini defines driver options, while odbc.ini defines connection options. ODBCINST.INI should contain a pointer: [FreeTDS] Description=FreeTDS Driver for MSSQL (unix users) Driver=/usr/lib/x86_64-linux-gnu/odbc/libtdsodbc.so Setup=/usr/lib/x86_64-linux-gnu/odbc/libtdsodbc.so UsageCount=1 Your ODBCINST.INI should contain the driver to use i.e. Driver = FreeTDS, and optionally the credentials to connecting to the server (the server address, the UID and PWD, and Port). You can also specify these at run time, in your R script. "]
]
