[
["index.html", "About the ‘cmap4r’ R package", " About the ‘cmap4r’ R package cmap4r is an R package which contains methods to easily access and download from the “Simons CMAP”, a database which contains openly available quantitative data about the ocean. For further reading about Simons CMAP, refer to https://cmap.readthedocs.io/. "],
["introduction.html", "1 Introduction", " 1 Introduction cmap4r is an R package which contains methods to easily access and download from the “Simons CMAP”, a database which contains openly available quantitative data about the ocean. For further reading about Simons CMAP, refer to https://cmap.readthedocs.io/. "],
["getting-started.html", "2 Getting Started 2.1 Installation 2.2 One useful demo", " 2 Getting Started 2.1 Installation CMAP hosts data on a Microsoft SQL Server. An R user will need the following package to connect to the database: a) “DBI”, for database interface; b) “odbc” for connecting to the database using DBI interface. But before that, for the Mac operating system, a user needs to install the unixODBC library and database drivers. We suggest using SQL Server ODBC drivers (Free TDS). Using Homebrew, run the following commands to install the suggested module. brew install unixodbc brew install freetds In case of Linux operating system, first, install Anaconda distribution, and then run the following commands to install suggested module. conda install -c anaconda unixodbc conda install -c anaconda freetds Please follow the link to see other drivers available for installation. In addition, a user may require some additional R package for downloading, processing and visualizing the data. Run the following commands to install some of the essential packages. ## Package &quot;DBI&quot; provide interface to the database install.packages(&quot;DBI&quot;) ## Driver for the database install.packages(&quot;odbc&quot;) ## Package for data processing: install.packages(&quot;dbplyr&quot;) install.packages(&quot;plyr&quot;) ## Package for visualization: install.packages(&quot;ggplot2&quot;) install.packages(&quot;plotly&quot;) 2.2 One useful demo We will demonstrate the usage of this package here. Let us say we wanted to get data from a region of the ocean. (Picture goes here) Then, we would use this function Explaining the For any function, just do ?thisfunction for the full set of fetures. "],
["catalog-of-data.html", "3 Catalog of data", " 3 Catalog of data The catalog for the CMAP data is reproduced here. library(DBI,odbc) con &lt;- dbConnect(odbc::odbc(), DSN=&quot;CMAP-MSSQL&quot;,UID=&quot;ArmLab&quot;,PWD=&quot;ArmLab2018&quot;) fileName &lt;- file.path(getwd(),&quot;catalogquery.txt&quot;) singleString &lt;- readChar(fileName, file.info(fileName)$size) catalog_query &lt;- gsub(&quot;\\n&quot;,&quot;&quot;,singleString) df &lt;- dbGetQuery(con,catalog_query) catVar &lt;- c(&#39;Dataset Name&#39;, &#39;Table Name&#39; ,&#39;Sensor&#39;, &#39;Make&#39;,&#39;Spatial Resolution&#39;, &#39;Temporal Resolution&#39;,&#39;Start Date&#39;,&#39;End Date&#39;) df &lt;- df[,catVar] tblindex &lt;- which(!duplicated(df$`Dataset Name`)) tbl.catelog &lt;- df[tblindex,1:8] rownames(tbl.catelog) &lt;- NULL library(knitr) kable(tbl.catelog) dbDisconnect(con) "],
["functions-in-our-r-package.html", "4 Functions in our R package 4.1 Download table 4.2 Summarize table 4.3 Visualization 4.4 Colocalize data", " 4 Functions in our R package The full set of functions available are here. 4.1 Download table The user can process the data, a) by downloading the data as data frame to the local computer; or b) using the functions from the dbplyr package which facilitates data preparation (like mutation, aggregation) on the database itself. To ensure optimal usage of the hardware resources (Justin’s comment: don’t we mean “to minimize communication costs incurred with the server”?), we recommend downloading the data to the local computer and then processing it for further analysis. To retrieve the data from CMAP, a user need to specify following parameters: Table Name (table.name) Variables to be extracted (sel.var) Range variable includes (latitude, longitude, depth, time) Use getTableData function to download the data as data frame. con &lt;- dbConnect(odbc::odbc(), DSN=&quot;CMAP-MSSQL&quot;,UID=&quot;ArmLab&quot;,PWD=&quot;ArmLab2018&quot;) ## Input: Table name; variable name, space time range information table.name = &#39;tblsst_AVHRR_OI_NRT&#39; # table name sel.var = &#39;sst&#39; # choose variable range.var &lt;- list() # Range variable [lat,lon,time] range.var$lat &lt;- c(10,70) range.var$lon &lt;- c(-180,-80) range.var$time &lt;- c(&#39;2016-04-30&#39;, &#39;2016-04-30&#39;) ## Subset selection: tbl.subset &lt;- getTableData(con, table.name, sel.var, range.var) head(tbl.subset) dbDisconnect(con) 4.2 Summarize table We explain how to get attributes of a table. A typical table’s attributes include: name of variables type of variables, i.e., quantitative, qualitative, time, size of the table space-time range information numerical variable range summary con &lt;- dbConnect(odbc::odbc(), DSN=&quot;CMAP-MSSQL&quot;,UID=&quot;ArmLab&quot;,PWD=&quot;ArmLab2018&quot;) ## Choose table: table.name &lt;- &quot;tblsst_AVHRR_OI_NRT&quot; # Variable name in the table tbl.fields &lt;- dbListFields(con,table.name) print(tbl.fields) ## collect sample data tbl.fields &lt;- getDataSample(con,table.name,n=5) print(tbl.fields) # Class of each column in the table tbl.colClass &lt;- getColClass(con,table.name) print(tbl.colClass) # Number of observations nObs &lt;- getObservationCount(con,table.name) nObs # Space/time information of the table tbl.spaceTimeInfo &lt;- getSpaceTimeRange(con,table.name) print(tbl.spaceTimeInfo) # Numeric variable range: tbl.rangeNumVar &lt;- getRangeNumVar(con,table.name) print(tbl.rangeNumVar) dbDisconnect(con) 4.3 Visualization You have two built-in options for making plots – scatter plots to compare two variable of interest, or histograms. 4.3.1 Scatterplots Specify following parameters to retrieve required data. Table Name (table.name) Variables to be extracted (sel.var) Range variable includes (latitude, longitude, depth, time) In addition to this, specify “agg.var” parameter to aggregate the variable of interest, and align the data from the two tables. For example, we select agg.var = “time”. plot_xy function download the data, and output a list which contain a) plot object: plot_ly/ggplot; b) corresponding data tables. con &lt;- dbConnect(odbc::odbc(), DSN=&quot;CMAP-MSSQL&quot;,UID=&quot;ArmLab&quot;,PWD=&quot;ArmLab2018&quot;) # Inpit variable: # table.list &lt;- c(&#39;tblSST_AVHRR_OI_NRT&#39;, &#39;tblAltimetry_REP&#39;) var.list &lt;- c(&#39;sst&#39;, &#39;sla&#39;) # range.var &lt;- list() range.var$lat &lt;- c(25,30) range.var$lon &lt;- c(-160, -155) range.var$time &lt;- c(&#39;2016-03-29&#39;, &#39;2016-05-29&#39;) # agg.var &lt;- &#39;time&#39; ## ----------------------------------- ## Dataset from table II selIndex &lt;- 1 table.name &lt;- table.list[selIndex] # Specify table name I sel.var &lt;- var.list[selIndex] # Variable from table name I tbl.subset.x &lt;- getAggregatedTableData(con, table.name, sel.var, range.var, agg.var) head(tbl.subset.x) ## Dataset from table II selIndex &lt;- 2 table.name &lt;- table.list[selIndex] # Specify table name II sel.var &lt;- var.list[selIndex] # Variable from table name II tbl.subset.y &lt;- getAggregatedTableData(con, table.name, sel.var, range.var, agg.var) head(tbl.subset.y) ## Plot - XY # out &lt;- plot_xy(con, table.list,var.list,range.var,agg.var,type = &#39;ggplot&#39;) out &lt;- plot_xy(con, table.list,var.list,range.var,agg.var,type = &#39;plotly&#39;) out$plot dbDisconnect(con) 4.3.2 Histograms To generate a histogram plot of a variable of interest, a user needs to specify the following parameters: Table Name (table.name) Variables to be extracted (sel.var) Range variable includes (latitude, longitude, depth, time) to retrieve data from CMAP. Call plot_depth function to obtain plot_ly/ggplot object. Take the following example con &lt;- dbConnect(odbc::odbc(), DSN=&quot;CMAP-MSSQL&quot;,UID=&quot;ArmLab&quot;,PWD=&quot;ArmLab2018&quot;) # Inpit variable: table.list &lt;- c(&#39;tblSST_AVHRR_OI_NRT&#39;, &#39;tblArgoMerge_REP&#39;, &#39;tblArgoMerge_REP&#39;) var.list &lt;- c(&#39;sst&#39;, &#39;argo_merge_temperature_adj&#39;, &#39;argo_merge_salinity_adj&#39;) # variable &quot;sst&quot; selected from &quot;tblSST_AVHRR_OI_NRT&quot; selIndex &lt;- 1 table.name &lt;- table.list[selIndex] sel.var &lt;- var.list[selIndex] # Range variable range.var &lt;- list() range.var$lat &lt;- c(20, 24) range.var$lon &lt;- c(-170, 150) range.var$time &lt;- c(&#39;2016-04-30&#39;, &#39;2016-04-30&#39;) # Subset selection: tbl.subset &lt;- getTableData(con, table.name, sel.var, range.var) head(tbl.subset) ## Plot function available for R User # p &lt;- plot_hist(tbl.subset,&#39;ggplot&#39;,sel.var) p &lt;- plot_hist(tbl.subset,&#39;plotly&#39;,sel.var) p dbDisconnect(con) 4.4 Colocalize data First, what does it mean to colocalize? Imagine a ship moving along a trajectory, whose location in space and time is recorded in latitude/longitude/time. Then, we’d like to get ocean attributes, like sea surface temperature or salinity, as if we were recording it along the ship’s trajectory. Colocalization simply means getting such attributes manually from the database, by obtaining data from the vicinity of each lat/lon/time triplet and summarizing it (e.g. take mean or standard deviation). The vicinity is define by the user-specified slack in longitude, latitude and time. For instance, one could define vicinity by asking for 1/4 degrees of slack in longitude and latitude, and 6 hours of slack in time. Long story short, the basic idea is: query “rectangle” region’s subtable for every lat/lon/time triplet, for each variable. The main function to do this is matchSource_onetable, which colocalizes data for one table at a time (the table.name variable from the catalog), and one or more variables in that table (the sel.var variable, again from the catalog). The latitude/longitude/time triplets are to be in a CSV file whose path you’ll supply in the variable source. Here is a short example: ## Setup con = DBI::dbConnect(odbc::odbc(), DSN=&quot;CMAP-MSSQL&quot;,UID=&quot;ArmLab&quot;,PWD=&quot;ArmLab2018&quot;) latMargin = 0.3 lonMargin = 0.3 timeMargin = 1 source = &#39;~/Desktop/MGL1704-veryshort.csv&#39; table.name = &quot;tblSST_AVHRR_OI_NRT&quot; sel.var = &quot;sst&quot; res = matchSource_onetable(con, source, table.name, sel.var, latMargin, lonMargin, timeMargin) print(head(res)) "],
["faq.html", "5 FAQ", " 5 FAQ Q: How does this differ from the Python package? A: This is better. Use this. "]
]
